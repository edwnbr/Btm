import logging
import json
import time
import threading
import requests
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, MessageHandler, Filters, CallbackContext
from apscheduler.schedulers.background import BackgroundScheduler

# –£—Å—Ç–∞–Ω–æ–≤–∏ —Å–≤–æ–π BOT TOKEN –∑–¥–µ—Å—å
TOKEN = "7697812728:AAG72LwVSOhN-v1kguh3OPXK9BzXffJUrYE"


# ===================== CONFIG =====================
RENDER_EXTERNAL_HOSTNAME = "btm-c4tt.onrender.com"  # <-- –≤–∞—à Render-–¥–æ–º–µ–Ω

WEBHOOK_HOST = f"https://{RENDER_EXTERNAL_HOSTNAME}"
WEBHOOK_PATH = f"/{TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
PORT = 8443

# –°—Ç–∞—Ä—Ç–æ–≤—ã–π –ª–æ–≥–≥–µ—Ä
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –ë–∏—Ä–∂–∏
SUPPORTED_EXCHANGES = ["Binance", "Bybit", "MEXC", "BingX", "KuCoin", "OKX"]

# –î–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_USER_SETTINGS = {
    "language": "ru",
    "exchange": "Binance",
    "interval": 60,
    "threshold": 2,
    "verified": False,
    "notify_type": "both"
}

# –ü–µ—Ä–µ–≤–æ–¥—ã
LANG = {
    "ru": {
        "welcome": "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü—Ä–æ–π–¥–∏—Ç–µ CAPTCHA:",
        "verified": "‚úÖ –í—ã –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã!",
        "choose_exchange": "–í—ã–±–µ—Ä–∏—Ç–µ –±–∏—Ä–∂—É:",
        "choose_interval": "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª:",
        "choose_threshold": "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ä–æ–≥:",
        "choose_notify": "–¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:",
        "menu": "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
        "back": "üîô –ù–∞–∑–∞–¥",
        "pumps": "üìà –¢–æ–ª—å–∫–æ –ø–∞–º–ø—ã",
        "dumps": "üìâ –¢–æ–ª—å–∫–æ –¥–∞–º–ø—ã",
        "both": "üìä –í—Å—ë"
    },
    "en": {
        "welcome": "üëã Welcome! Please pass the CAPTCHA:",
        "verified": "‚úÖ You are verified!",
        "choose_exchange": "Choose exchange:",
        "choose_interval": "Choose interval:",
        "choose_threshold": "Choose threshold:",
        "choose_notify": "Notification type:",
        "menu": "‚öô Settings",
        "back": "üîô Back",
        "pumps": "üìà Pumps only",
        "dumps": "üìâ Dumps only",
        "both": "üìä Both"
    }
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è CAPTCHA (emoji)
def generate_captcha():
    return "üëç"

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä—Ç–∞
def start(update: Update, context: CallbackContext):
    uid = update.effective_user.id
    user_data[uid] = DEFAULT_USER_SETTINGS.copy()
    user_data[uid]["captcha"] = generate_captcha()
    lang = user_data[uid]["language"]
    keyboard = [[InlineKeyboardButton(user_data[uid]["captcha"], callback_data="captcha_passed")]]
    update.message.reply_text(LANG[lang]["welcome"], reply_markup=InlineKeyboardMarkup(keyboard))

# CAPTCHA-–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
def button(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    uid = query.from_user.id

    if uid not in user_data:
        user_data[uid] = DEFAULT_USER_SETTINGS.copy()

    if query.data == "captcha_passed":
        user_data[uid]["verified"] = True
        lang = user_data[uid]["language"]
        query.edit_message_text(text=LANG[lang]["verified"])
        show_main_menu(query, uid)
    elif query.data.startswith("exchange_"):
        user_data[uid]["exchange"] = query.data.split("_")[1]
        show_main_menu(query, uid)
    elif query.data.startswith("interval_"):
        user_data[uid]["interval"] = int(query.data.split("_")[1])
        show_main_menu(query, uid)
    elif query.data.startswith("threshold_"):
        user_data[uid]["threshold"] = int(query.data.split("_")[1])
        show_main_menu(query, uid)
    elif query.data.startswith("notify_"):
        user_data[uid]["notify_type"] = query.data.split("_")[1]
        show_main_menu(query, uid)
    elif query.data == "settings":
        show_settings_menu(query, uid)
    elif query.data == "back":
        show_main_menu(query, uid)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def show_main_menu(query, uid):
    lang = user_data[uid]["language"]
    buttons = [
        [InlineKeyboardButton(LANG[lang]["choose_exchange"], callback_data="settings")],
        [InlineKeyboardButton(LANG[lang]["menu"], callback_data="settings")]
    ]
    query.message.reply_text("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–∫–ª—é—á–µ–Ω!", reply_markup=InlineKeyboardMarkup(buttons))

# –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
def show_settings_menu(query, uid):
    lang = user_data[uid]["language"]
    buttons = [
        [InlineKeyboardButton(exchange, callback_data=f"exchange_{exchange}")] for exchange in SUPPORTED_EXCHANGES
    ] + [
        [InlineKeyboardButton("30s", callback_data="interval_30"),
         InlineKeyboardButton("1m", callback_data="interval_60"),
         InlineKeyboardButton("5m", callback_data="interval_300")],
        [InlineKeyboardButton("1%", callback_data="threshold_1"),
         InlineKeyboardButton("2%", callback_data="threshold_2"),
         InlineKeyboardButton("5%", callback_data="threshold_5")],
        [InlineKeyboardButton(LANG[lang]["pumps"], callback_data="notify_pumps"),
         InlineKeyboardButton(LANG[lang]["dumps"], callback_data="notify_dumps"),
         InlineKeyboardButton(LANG[lang]["both"], callback_data="notify_both")],
        [InlineKeyboardButton(LANG[lang]["back"], callback_data="back")]
    ]
    query.message.reply_text(LANG[lang]["choose_exchange"], reply_markup=InlineKeyboardMarkup(buttons))

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω—ã (–∑–∞–≥–ª—É—à–∫–∞)
def monitor():
    while True:
        for uid, data in user_data.items():
            if data["verified"]:
                # –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –∫ API –±–∏—Ä–∂–∏ (—Ç–æ–ª—å–∫–æ Binance –∑–¥–µ—Å—å)
                if data["exchange"] == "Binance":
                    try:
                        resp = requests.get("https://fapi.binance.com/fapi/v1/ticker/24hr")
                        market_data = resp.json()
                        if isinstance(market_data, list):
                            pass  # –ó–¥–µ—Å—å –ª–æ–≥–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                        else:
                            logging.warning("Unexpected data format")
                    except Exception as e:
                        logging.warning(f"Monitor error: {e}")
        time.sleep(15)

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
def main():
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CallbackQueryHandler(button))

    # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    t = threading.Thread(target=monitor)
    t.start()

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()

app = Flask(__name__)

updater.start_webhook(
    listen="0.0.0.0",
    port=PORT,
    url_path=BOT_TOKEN,
    webhook_url=WEBHOOK_URL,
)

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=PORT)
