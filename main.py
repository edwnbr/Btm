import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, ConversationHandler
import requests
from flask import Flask, request
import threading
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "7697812728:AAG72LwVSOhN-v1kguh3OPXK9BzXffJUrYE"
WEBHOOK_URL = "https://btm-c4tt.onrender.com/" + TOKEN

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# –°—Ç–∞—Ä—Ç–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
LANGUAGE, MENU = range(2)

# –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –Ø–∑—ã–∫–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã
texts = {
    'ru': {
        'start': "üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Select language:",
        'menu': "‚öôÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        'settings': "üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.",
        'choose_exchange': "üè¶ –í—ã–±–µ—Ä–∏—Ç–µ –±–∏—Ä–∂—É:",
        'choose_market': "üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä—ã–Ω–∫–∞:",
        'choose_timeframe': "‚è± –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º:",
        'choose_threshold': "üìà –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è (%):",
        'choose_notify': "‚ö° –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:",
        'ai_analysis': "ü§ñ AI-–∞–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.",
        'back': "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
    },
    'en': {
        'start': "üåê Choose language:",
        'menu': "‚öôÔ∏è Main menu:",
        'settings': "üõ† Settings saved.",
        'choose_exchange': "üè¶ Choose exchange:",
        'choose_market': "üìä Choose market type:",
        'choose_timeframe': "‚è± Choose timeframe:",
        'choose_threshold': "üìà Choose threshold change (%):",
        'choose_notify': "‚ö° Choose notification type:",
        'ai_analysis': "ü§ñ AI analysis activated.",
        'back': "üîô Back to menu",
    }
}

reply_keyboards = {
    'language': [['üá∑üá∫ –†—É—Å—Å–∫–∏–π', 'üá∫üá∏ English']],
    'main_ru': [['üè¶ –ë–∏—Ä–∂–∞', 'üìä –†—ã–Ω–æ–∫'], ['‚è± –¢–∞–π–º—Ñ—Ä–µ–π–º', 'üìà –ü–æ—Ä–æ–≥ %'], ['‚ö° –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'ü§ñ AI-–∞–Ω–∞–ª–∏–∑'], ['üîÑ –ú–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏']],
    'main_en': [['üè¶ Exchange', 'üìä Market'], ['‚è± Timeframe', 'üìà Threshold %'], ['‚ö° Notifications', 'ü§ñ AI analysis'], ['üîÑ My Settings']],
}

def start(update: Update, context: CallbackContext) -> int:
    update.message.reply_text(texts['ru']['start'], reply_markup=ReplyKeyboardMarkup(reply_keyboards['language'], resize_keyboard=True))
    return LANGUAGE

def language(update: Update, context: CallbackContext) -> int:
    lang = 'ru' if '–†—É—Å—Å–∫–∏–π' in update.message.text else 'en'
    user_id = update.effective_user.id
    user_data[user_id] = {'lang': lang}
    markup = ReplyKeyboardMarkup(reply_keyboards[f'main_{lang}'], resize_keyboard=True)
    update.message.reply_text(texts[lang]['menu'], reply_markup=markup)
    return MENU

def menu_handler(update: Update, context: CallbackContext) -> int:
    user_id = update.effective_user.id
    lang = user_data.get(user_id, {}).get('lang', 'en')
    msg = update.message.text
    reply = ReplyKeyboardMarkup(reply_keyboards[f'main_{lang}'], resize_keyboard=True)
    update.message.reply_text(texts[lang]['menu'], reply_markup=reply)
    return MENU

def webhook():
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            LANGUAGE: [MessageHandler(Filters.text & ~Filters.command, language)],
            MENU: [MessageHandler(Filters.text & ~Filters.command, menu_handler)],
        },
        fallbacks=[],
    )

    dp.add_handler(conv_handler)

    updater.start_webhook(listen="0.0.0.0", port=8443, url_path=TOKEN, webhook_url=WEBHOOK_URL)
    updater.idle()

@app.route("/" + TOKEN, methods=["POST"])
def telegram_webhook():
    return "OK", 200

def run_flask():
    app.run(host="0.0.0.0", port=8080)

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    threading.Thread(target=run_flask).start()
    webhook()
