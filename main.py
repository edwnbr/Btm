import logging
import os
from flask import Flask, request
from telegram import Bot, Update, ReplyKeyboardMarkup
from telegram.ext import (
    Updater, CommandHandler, MessageHandler, Filters,
    CallbackContext, Dispatcher
)

# ===================== CONFIG =====================
BOT_TOKEN = "7697812728:AAG72LwVSOhN-v1kguh3OPXK9BzXffJUrYE"
RENDER_EXTERNAL_HOSTNAME = "btm-c4tt.onrender.com"

WEBHOOK_HOST = f"https://{RENDER_EXTERNAL_HOSTNAME}"
WEBHOOK_PATH = f"/{BOT_TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
PORT = int(os.environ.get('PORT', 8443))

# ===================== LOGGING =====================
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ===================== APP =====================
app = Flask(__name__)
bot = Bot(token=BOT_TOKEN)
dispatcher = Dispatcher(bot, None, workers=0, use_context=True)

# ===================== USER DATA =====================
user_data = {}

# ===================== TRANSLATIONS =====================
texts = {
    "ru": {
        "start": "üëã –ü—Ä–∏–≤–µ—Ç! –ü—Ä–æ–π–¥–∏ –∫–∞–ø—á—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
        "captcha_passed": "‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!",
        "language_selected": "üåê –Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –†—É—Å—Å–∫–∏–π",
        "menu": "üëá –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        "settings": "‚öôÔ∏è –í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
        "confirm": "‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: ",
        "main_menu": [["üåê –Ø–∑—ã–∫", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]],
    },
    "en": {
        "start": "üëã Hello! Please verify CAPTCHA to continue.",
        "captcha_passed": "‚úÖ Verification successful!",
        "language_selected": "üåê Language set to: English",
        "menu": "üëá Choose an action:",
        "settings": "‚öôÔ∏è Your Settings:",
        "confirm": "‚úÖ You selected: ",
        "main_menu": [["üåê Language", "‚öôÔ∏è Settings"]],
    }
}

# ===================== KEYBOARDS =====================
def get_keyboard(lang):
    return ReplyKeyboardMarkup(
        keyboard=texts[lang]["main_menu"],
        resize_keyboard=True,
        one_time_keyboard=False
    )

# ===================== HANDLERS =====================
def start(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    user_data[user_id] = {"verified": False, "lang": "en"}

    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=texts["en"]["start"],
        reply_markup=ReplyKeyboardMarkup([["‚úÖ I'm not a bot"]], resize_keyboard=True)
    )

def handle_text(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    message = update.message.text

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ CAPTCHA
    if not user_data.get(user_id, {}).get("verified"):
        if message == "‚úÖ I'm not a bot" or message == "‚úÖ –Ø –Ω–µ –±–æ—Ç":
            user_data[user_id]["verified"] = True
            lang = user_data[user_id]["lang"]
            context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=texts[lang]["captcha_passed"],
                reply_markup=get_keyboard(lang)
            )
        else:
            context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="üö´ –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ CAPTCHA." if user_data[user_id]["lang"] == "ru" else "üö´ Please complete CAPTCHA first."
            )
        return

    lang = user_data[user_id]["lang"]

    # –í—ã–±–æ—Ä —è–∑—ã–∫–∞
    if message in ["üåê –Ø–∑—ã–∫", "üåê Language"]:
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:",
            reply_markup=ReplyKeyboardMarkup(
                [["–†—É—Å—Å–∫–∏–π", "English"]],
                resize_keyboard=True,
                one_time_keyboard=True
            )
        )
    elif message == "–†—É—Å—Å–∫–∏–π":
        user_data[user_id]["lang"] = "ru"
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=texts["ru"]["language_selected"],
            reply_markup=get_keyboard("ru")
        )
    elif message == "English":
        user_data[user_id]["lang"] = "en"
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=texts["en"]["language_selected"],
            reply_markup=get_keyboard("en")
        )
    elif message in ["‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "‚öôÔ∏è Settings"]:
        current = user_data.get(user_id, {})
        settings_text = f"{texts[lang]['settings']}\n\nüåê –Ø–∑—ã–∫ / Language: {lang.upper()}\n‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: {'–î–∞' if current.get('verified') else '–ù–µ—Ç'}"
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=settings_text,
            reply_markup=get_keyboard(lang)
        )
    else:
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=texts[lang]["confirm"] + message,
            reply_markup=get_keyboard(lang)
        )

# ===================== FLASK WEBHOOK =====================
@app.route(f"/{BOT_TOKEN}", methods=["POST"])
def webhook():
    update = Update.de_json(request.get_json(force=True), bot)
    dispatcher.process_update(update)
    return "OK"

@app.route("/")
def index():
    return "Bot is running."

# ===================== MAIN =====================
def main():
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_text))

    bot.set_webhook(url=WEBHOOK_URL)
    app.run(host="0.0.0.0", port=PORT)

if __name__ == '__main__':
    main()
